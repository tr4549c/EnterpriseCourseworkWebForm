#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnterpriseCourseworkWebForm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="as6501h")]
	public partial class DataClassesUniversityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAllStaff(AllStaff instance);
    partial void UpdateAllStaff(AllStaff instance);
    partial void DeleteAllStaff(AllStaff instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertRegisteredStaff(RegisteredStaff instance);
    partial void UpdateRegisteredStaff(RegisteredStaff instance);
    partial void DeleteRegisteredStaff(RegisteredStaff instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertDepartmentCategory(DepartmentCategory instance);
    partial void UpdateDepartmentCategory(DepartmentCategory instance);
    partial void DeleteDepartmentCategory(DepartmentCategory instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertIdea(Idea instance);
    partial void UpdateIdea(Idea instance);
    partial void DeleteIdea(Idea instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    #endregion
		
		public DataClassesUniversityDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["as6501hConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesUniversityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesUniversityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesUniversityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesUniversityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllStaff> AllStaffs
		{
			get
			{
				return this.GetTable<AllStaff>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<RegisteredStaff> RegisteredStaffs
		{
			get
			{
				return this.GetTable<RegisteredStaff>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentCategory> DepartmentCategories
		{
			get
			{
				return this.GetTable<DepartmentCategory>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Idea> Ideas
		{
			get
			{
				return this.GetTable<Idea>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllStaff")]
	public partial class AllStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AllStaffID;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _Name;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<RegisteredStaff> _RegisteredStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllStaffIDChanging(int value);
    partial void OnAllStaffIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public AllStaff()
		{
			this._RegisteredStaffs = new EntitySet<RegisteredStaff>(new Action<RegisteredStaff>(this.attach_RegisteredStaffs), new Action<RegisteredStaff>(this.detach_RegisteredStaffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllStaffID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AllStaffID
		{
			get
			{
				return this._AllStaffID;
			}
			set
			{
				if ((this._AllStaffID != value))
				{
					this.OnAllStaffIDChanging(value);
					this.SendPropertyChanging();
					this._AllStaffID = value;
					this.SendPropertyChanged("AllStaffID");
					this.OnAllStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AllStaff_RegisteredStaff", Storage="_RegisteredStaffs", ThisKey="AllStaffID", OtherKey="AllStaffID")]
		public EntitySet<RegisteredStaff> RegisteredStaffs
		{
			get
			{
				return this._RegisteredStaffs;
			}
			set
			{
				this._RegisteredStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.AllStaff = this;
		}
		
		private void detach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.AllStaff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private EntitySet<RegisteredStaff> _RegisteredStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._RegisteredStaffs = new EntitySet<RegisteredStaff>(new Action<RegisteredStaff>(this.attach_RegisteredStaffs), new Action<RegisteredStaff>(this.detach_RegisteredStaffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RegisteredStaff", Storage="_RegisteredStaffs", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<RegisteredStaff> RegisteredStaffs
		{
			get
			{
				return this._RegisteredStaffs;
			}
			set
			{
				this._RegisteredStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartementName;
		
		private EntitySet<RegisteredStaff> _RegisteredStaffs;
		
		private EntitySet<DepartmentCategory> _DepartmentCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartementNameChanging(string value);
    partial void OnDepartementNameChanged();
    #endregion
		
		public Department()
		{
			this._RegisteredStaffs = new EntitySet<RegisteredStaff>(new Action<RegisteredStaff>(this.attach_RegisteredStaffs), new Action<RegisteredStaff>(this.detach_RegisteredStaffs));
			this._DepartmentCategories = new EntitySet<DepartmentCategory>(new Action<DepartmentCategory>(this.attach_DepartmentCategories), new Action<DepartmentCategory>(this.detach_DepartmentCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartementName", DbType="VarChar(50)")]
		public string DepartementName
		{
			get
			{
				return this._DepartementName;
			}
			set
			{
				if ((this._DepartementName != value))
				{
					this.OnDepartementNameChanging(value);
					this.SendPropertyChanging();
					this._DepartementName = value;
					this.SendPropertyChanged("DepartementName");
					this.OnDepartementNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_RegisteredStaff", Storage="_RegisteredStaffs", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<RegisteredStaff> RegisteredStaffs
		{
			get
			{
				return this._RegisteredStaffs;
			}
			set
			{
				this._RegisteredStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentCategory", Storage="_DepartmentCategories", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<DepartmentCategory> DepartmentCategories
		{
			get
			{
				return this._DepartmentCategories;
			}
			set
			{
				this._DepartmentCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_RegisteredStaffs(RegisteredStaff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_DepartmentCategories(DepartmentCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_DepartmentCategories(DepartmentCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<DepartmentCategory> _DepartmentCategories;
		
		private EntitySet<Idea> _Ideas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._DepartmentCategories = new EntitySet<DepartmentCategory>(new Action<DepartmentCategory>(this.attach_DepartmentCategories), new Action<DepartmentCategory>(this.detach_DepartmentCategories));
			this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_DepartmentCategory", Storage="_DepartmentCategories", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<DepartmentCategory> DepartmentCategories
		{
			get
			{
				return this._DepartmentCategories;
			}
			set
			{
				this._DepartmentCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Idea", Storage="_Ideas", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Idea> Ideas
		{
			get
			{
				return this._Ideas;
			}
			set
			{
				this._Ideas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentCategories(DepartmentCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_DepartmentCategories(DepartmentCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisteredStaff")]
	public partial class RegisteredStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegisteredStaffID;
		
		private string _Name;
		
		private string _RUsername;
		
		private string _RPassword;
		
		private System.Nullable<int> _RoleID;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _AllStaffID;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Idea> _Ideas;
		
		private EntitySet<Rating> _Ratings;
		
		private EntityRef<AllStaff> _AllStaff;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegisteredStaffIDChanging(int value);
    partial void OnRegisteredStaffIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRUsernameChanging(string value);
    partial void OnRUsernameChanged();
    partial void OnRPasswordChanging(string value);
    partial void OnRPasswordChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnAllStaffIDChanging(System.Nullable<int> value);
    partial void OnAllStaffIDChanged();
    #endregion
		
		public RegisteredStaff()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._AllStaff = default(EntityRef<AllStaff>);
			this._Department = default(EntityRef<Department>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredStaffID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RegisteredStaffID
		{
			get
			{
				return this._RegisteredStaffID;
			}
			set
			{
				if ((this._RegisteredStaffID != value))
				{
					this.OnRegisteredStaffIDChanging(value);
					this.SendPropertyChanging();
					this._RegisteredStaffID = value;
					this.SendPropertyChanged("RegisteredStaffID");
					this.OnRegisteredStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RUsername", DbType="VarChar(MAX)")]
		public string RUsername
		{
			get
			{
				return this._RUsername;
			}
			set
			{
				if ((this._RUsername != value))
				{
					this.OnRUsernameChanging(value);
					this.SendPropertyChanging();
					this._RUsername = value;
					this.SendPropertyChanged("RUsername");
					this.OnRUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPassword", DbType="VarChar(MAX)")]
		public string RPassword
		{
			get
			{
				return this._RPassword;
			}
			set
			{
				if ((this._RPassword != value))
				{
					this.OnRPasswordChanging(value);
					this.SendPropertyChanging();
					this._RPassword = value;
					this.SendPropertyChanged("RPassword");
					this.OnRPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllStaffID", DbType="Int")]
		public System.Nullable<int> AllStaffID
		{
			get
			{
				return this._AllStaffID;
			}
			set
			{
				if ((this._AllStaffID != value))
				{
					if (this._AllStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllStaffIDChanging(value);
					this.SendPropertyChanging();
					this._AllStaffID = value;
					this.SendPropertyChanged("AllStaffID");
					this.OnAllStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Comment", Storage="_Comments", ThisKey="RegisteredStaffID", OtherKey="StaffID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Idea", Storage="_Ideas", ThisKey="RegisteredStaffID", OtherKey="StaffID")]
		public EntitySet<Idea> Ideas
		{
			get
			{
				return this._Ideas;
			}
			set
			{
				this._Ideas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Rating", Storage="_Ratings", ThisKey="RegisteredStaffID", OtherKey="StaffID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AllStaff_RegisteredStaff", Storage="_AllStaff", ThisKey="AllStaffID", OtherKey="AllStaffID", IsForeignKey=true)]
		public AllStaff AllStaff
		{
			get
			{
				return this._AllStaff.Entity;
			}
			set
			{
				AllStaff previousValue = this._AllStaff.Entity;
				if (((previousValue != value) 
							|| (this._AllStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AllStaff.Entity = null;
						previousValue.RegisteredStaffs.Remove(this);
					}
					this._AllStaff.Entity = value;
					if ((value != null))
					{
						value.RegisteredStaffs.Add(this);
						this._AllStaffID = value.AllStaffID;
					}
					else
					{
						this._AllStaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AllStaff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_RegisteredStaff", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.RegisteredStaffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.RegisteredStaffs.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RegisteredStaff", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RegisteredStaffs.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RegisteredStaffs.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = null;
		}
		
		private void attach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = this;
		}
		
		private void detach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredStaff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private string _Comment1;
		
		private System.Nullable<int> _IdeaID;
		
		private System.Nullable<int> _StaffID;
		
		private System.Nullable<bool> _IsAnnonymous;
		
		private EntityRef<RegisteredStaff> _RegisteredStaff;
		
		private EntityRef<Idea> _Idea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnComment1Changing(string value);
    partial void OnComment1Changed();
    partial void OnIdeaIDChanging(System.Nullable<int> value);
    partial void OnIdeaIDChanged();
    partial void OnStaffIDChanging(System.Nullable<int> value);
    partial void OnStaffIDChanged();
    partial void OnIsAnnonymousChanging(System.Nullable<bool> value);
    partial void OnIsAnnonymousChanged();
    #endregion
		
		public Comment()
		{
			this._RegisteredStaff = default(EntityRef<RegisteredStaff>);
			this._Idea = default(EntityRef<Idea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_Comment1", DbType="VarChar(MAX)")]
		public string Comment1
		{
			get
			{
				return this._Comment1;
			}
			set
			{
				if ((this._Comment1 != value))
				{
					this.OnComment1Changing(value);
					this.SendPropertyChanging();
					this._Comment1 = value;
					this.SendPropertyChanged("Comment1");
					this.OnComment1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int")]
		public System.Nullable<int> IdeaID
		{
			get
			{
				return this._IdeaID;
			}
			set
			{
				if ((this._IdeaID != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdeaIDChanging(value);
					this.SendPropertyChanging();
					this._IdeaID = value;
					this.SendPropertyChanged("IdeaID");
					this.OnIdeaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int")]
		public System.Nullable<int> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._RegisteredStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnnonymous", DbType="Bit")]
		public System.Nullable<bool> IsAnnonymous
		{
			get
			{
				return this._IsAnnonymous;
			}
			set
			{
				if ((this._IsAnnonymous != value))
				{
					this.OnIsAnnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnnonymous = value;
					this.SendPropertyChanged("IsAnnonymous");
					this.OnIsAnnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Comment", Storage="_RegisteredStaff", ThisKey="StaffID", OtherKey="RegisteredStaffID", IsForeignKey=true)]
		public RegisteredStaff RegisteredStaff
		{
			get
			{
				return this._RegisteredStaff.Entity;
			}
			set
			{
				RegisteredStaff previousValue = this._RegisteredStaff.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredStaff.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._RegisteredStaff.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._StaffID = value.RegisteredStaffID;
					}
					else
					{
						this._StaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegisteredStaff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Comment", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._IdeaID = value.IdeaID;
					}
					else
					{
						this._IdeaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentCategory")]
	public partial class DepartmentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentCategoryID;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<int> _DepartmentID;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentCategoryIDChanging(int value);
    partial void OnDepartmentCategoryIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public DepartmentCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentCategoryID
		{
			get
			{
				return this._DepartmentCategoryID;
			}
			set
			{
				if ((this._DepartmentCategoryID != value))
				{
					this.OnDepartmentCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCategoryID = value;
					this.SendPropertyChanged("DepartmentCategoryID");
					this.OnDepartmentCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_DepartmentCategory", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.DepartmentCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.DepartmentCategories.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentCategory", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.DepartmentCategories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.DepartmentCategories.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private System.Nullable<int> _IdeaID;
		
		private string _DocPath;
		
		private EntityRef<Idea> _Idea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnIdeaIDChanging(System.Nullable<int> value);
    partial void OnIdeaIDChanged();
    partial void OnDocPathChanging(string value);
    partial void OnDocPathChanged();
    #endregion
		
		public Document()
		{
			this._Idea = default(EntityRef<Idea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int")]
		public System.Nullable<int> IdeaID
		{
			get
			{
				return this._IdeaID;
			}
			set
			{
				if ((this._IdeaID != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdeaIDChanging(value);
					this.SendPropertyChanging();
					this._IdeaID = value;
					this.SendPropertyChanged("IdeaID");
					this.OnIdeaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocPath", DbType="VarChar(MAX)")]
		public string DocPath
		{
			get
			{
				return this._DocPath;
			}
			set
			{
				if ((this._DocPath != value))
				{
					this.OnDocPathChanging(value);
					this.SendPropertyChanging();
					this._DocPath = value;
					this.SendPropertyChanged("DocPath");
					this.OnDocPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Document", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._IdeaID = value.IdeaID;
					}
					else
					{
						this._IdeaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Idea")]
	public partial class Idea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdeaID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _StaffID;
		
		private System.Nullable<bool> _IsAnnonymous;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Rating> _Ratings;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<RegisteredStaff> _RegisteredStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdeaIDChanging(int value);
    partial void OnIdeaIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStaffIDChanging(System.Nullable<int> value);
    partial void OnStaffIDChanged();
    partial void OnIsAnnonymousChanging(System.Nullable<bool> value);
    partial void OnIsAnnonymousChanged();
    #endregion
		
		public Idea()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Category = default(EntityRef<Category>);
			this._RegisteredStaff = default(EntityRef<RegisteredStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdeaID
		{
			get
			{
				return this._IdeaID;
			}
			set
			{
				if ((this._IdeaID != value))
				{
					this.OnIdeaIDChanging(value);
					this.SendPropertyChanging();
					this._IdeaID = value;
					this.SendPropertyChanged("IdeaID");
					this.OnIdeaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int")]
		public System.Nullable<int> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._RegisteredStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnnonymous", DbType="Bit")]
		public System.Nullable<bool> IsAnnonymous
		{
			get
			{
				return this._IsAnnonymous;
			}
			set
			{
				if ((this._IsAnnonymous != value))
				{
					this.OnIsAnnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnnonymous = value;
					this.SendPropertyChanged("IsAnnonymous");
					this.OnIsAnnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Comment", Storage="_Comments", ThisKey="IdeaID", OtherKey="IdeaID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Document", Storage="_Documents", ThisKey="IdeaID", OtherKey="IdeaID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Rating", Storage="_Ratings", ThisKey="IdeaID", OtherKey="IdeaID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Idea", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Ideas.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Ideas.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Idea", Storage="_RegisteredStaff", ThisKey="StaffID", OtherKey="RegisteredStaffID", IsForeignKey=true)]
		public RegisteredStaff RegisteredStaff
		{
			get
			{
				return this._RegisteredStaff.Entity;
			}
			set
			{
				RegisteredStaff previousValue = this._RegisteredStaff.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredStaff.Entity = null;
						previousValue.Ideas.Remove(this);
					}
					this._RegisteredStaff.Entity = value;
					if ((value != null))
					{
						value.Ideas.Add(this);
						this._StaffID = value.RegisteredStaffID;
					}
					else
					{
						this._StaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegisteredStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingID;
		
		private System.Nullable<int> _IdeaID;
		
		private System.Nullable<int> _StaffID;
		
		private System.Nullable<bool> _Vote;
		
		private EntityRef<Idea> _Idea;
		
		private EntityRef<RegisteredStaff> _RegisteredStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIDChanging(int value);
    partial void OnRatingIDChanged();
    partial void OnIdeaIDChanging(System.Nullable<int> value);
    partial void OnIdeaIDChanged();
    partial void OnStaffIDChanging(System.Nullable<int> value);
    partial void OnStaffIDChanged();
    partial void OnVoteChanging(System.Nullable<bool> value);
    partial void OnVoteChanged();
    #endregion
		
		public Rating()
		{
			this._Idea = default(EntityRef<Idea>);
			this._RegisteredStaff = default(EntityRef<RegisteredStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RatingID
		{
			get
			{
				return this._RatingID;
			}
			set
			{
				if ((this._RatingID != value))
				{
					this.OnRatingIDChanging(value);
					this.SendPropertyChanging();
					this._RatingID = value;
					this.SendPropertyChanged("RatingID");
					this.OnRatingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int")]
		public System.Nullable<int> IdeaID
		{
			get
			{
				return this._IdeaID;
			}
			set
			{
				if ((this._IdeaID != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdeaIDChanging(value);
					this.SendPropertyChanging();
					this._IdeaID = value;
					this.SendPropertyChanged("IdeaID");
					this.OnIdeaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int")]
		public System.Nullable<int> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._RegisteredStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vote", DbType="Bit")]
		public System.Nullable<bool> Vote
		{
			get
			{
				return this._Vote;
			}
			set
			{
				if ((this._Vote != value))
				{
					this.OnVoteChanging(value);
					this.SendPropertyChanging();
					this._Vote = value;
					this.SendPropertyChanged("Vote");
					this.OnVoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Rating", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._IdeaID = value.IdeaID;
					}
					else
					{
						this._IdeaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredStaff_Rating", Storage="_RegisteredStaff", ThisKey="StaffID", OtherKey="RegisteredStaffID", IsForeignKey=true)]
		public RegisteredStaff RegisteredStaff
		{
			get
			{
				return this._RegisteredStaff.Entity;
			}
			set
			{
				RegisteredStaff previousValue = this._RegisteredStaff.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredStaff.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._RegisteredStaff.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._StaffID = value.RegisteredStaffID;
					}
					else
					{
						this._StaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegisteredStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
